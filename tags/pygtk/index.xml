<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pygtk on Aşkın Özgür</title>
    <link>https://blog.askin.ws/tags/pygtk/</link>
    <description>Recent content in pygtk on Aşkın Özgür</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>askin@askin.ws (Aşkın Özgür)</managingEditor>
    <webMaster>askin@askin.ws (Aşkın Özgür)</webMaster>
    <lastBuildDate>Wed, 07 Apr 2010 21:53:00 +0300</lastBuildDate>
    
	<atom:link href="https://blog.askin.ws/tags/pygtk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PyGtk ile Sistem Çekmecesi</title>
      <link>https://blog.askin.ws/blog/pygtk-ile-sistem-cekmecesi/</link>
      <pubDate>Wed, 07 Apr 2010 21:53:00 +0300</pubDate>
      <author>askin@askin.ws (Aşkın Özgür)</author>
      <guid>https://blog.askin.ws/blog/pygtk-ile-sistem-cekmecesi/</guid>
      <description>Gtk ile çok kolay bir şekilde geliştirdiğiniz uygulamayı sistem çekmecesinde gösterebilirsiniz.
Ufak bir örnek kod veriyorum. Onun üzerinden anlatacağım.
import pygtk import gtk class ShowIcon: def __init__(self): self.icon = gtk.StatusIcon() self.icon.set_from_file(&#39;gtk.png&#39;) self.icon.set_tooltip_text(&#39;Hello Python!!!&#39;) self.icon.set_visible(True) self.icon.connect(&amp;quot;activate&amp;quot;, self.hello) gtk.main() def hello(self, widget): print &#39;Hello Python !!!&#39; if __name__ == &#39;__main__&#39;: icon = ShowIcon()  6. satırda asıl işimizi yapacak olan StatusIcon nesnesini yaratıyoruz.
7. satırda sistem çekmecesinde hangi ikonun görüntüleneceğini belirtiyoruz. set_from_file ikonu dosyadan alacağımız anlamına geliyor.</description>
    </item>
    
    <item>
      <title>PyGtk ve Thread Sorunu</title>
      <link>https://blog.askin.ws/blog/pygtk-ve-thread-sorunu/</link>
      <pubDate>Tue, 06 Apr 2010 23:03:00 +0300</pubDate>
      <author>askin@askin.ws (Aşkın Özgür)</author>
      <guid>https://blog.askin.ws/blog/pygtk-ve-thread-sorunu/</guid>
      <description>PyGtk ile ara yüzüzünü hazırladığım bir program içinde thread kullanmam gerekiyordu. Kod çalışıyordu fakat thread işlemi istediğim gibi çalışmıyordu. Arayüzde bir değişiklik olduğu zaman thread çalışıyor, onun dışında hiç bir şekilde tepki vermiyordu.
Uzun süre hatanın kodda olabileceğini düşündüm. Ama sonunda python gtk.main() ve thread 3&amp;rsquo;lüsünü aynı sorgu içinde googleda aratınca cevabı buldum. Gtk&amp;rsquo;ya thread kullandığımı anlatmam gerekiyordu :)
gtk.gdk.threads_init()  Bu satırı kodumun başına eklediğimde herşey istediğim gibi çalışmaya başladı :)</description>
    </item>
    
  </channel>
</rss>