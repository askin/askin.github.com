<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>socket on Aşkın Özgür</title>
    <link>https://blog.askin.ws/tags/socket/</link>
    <description>Recent content in socket on Aşkın Özgür</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-TR</language>
    <managingEditor>askin@askin.ws (Aşkın Özgür)</managingEditor>
    <webMaster>askin@askin.ws (Aşkın Özgür)</webMaster>
    <lastBuildDate>Fri, 03 Aug 2012 15:31:00 +0300</lastBuildDate>
    
	<atom:link href="https://blog.askin.ws/tags/socket/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UDP Broadcast sunucu - istemci</title>
      <link>https://blog.askin.ws/blog/udp-broadcast-sunucu-istemci/</link>
      <pubDate>Fri, 03 Aug 2012 15:31:00 +0300</pubDate>
      <author>askin@askin.ws (Aşkın Özgür)</author>
      <guid>https://blog.askin.ws/blog/udp-broadcast-sunucu-istemci/</guid>
      <description>Sunucu:
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/socket.h&amp;gt;#include &amp;lt;netinet/in.h&amp;gt; #define MY_PORT 3333  int main(int argc, char *argv[]) { int sockfd, new_fd; struct sockaddr_in my_addr; // hedef adres  struct sockaddr_in their_addr; // baglanti yapan adres  int sin_size, rt; // gelen verinin tutuldugu buffer  char buf[32]; // islem yapmak icin gerekli dosya gosterici  sockfd = socket(AF_INET, SOCK_DGRAM, 0); sin_size = sizeof(struct sockaddr_in); // adres ile ilgili ayarlar  my_addr.sin_family = AF_INET; my_addr.</description>
    </item>
    
    <item>
      <title>Java ile server socket yapımı</title>
      <link>https://blog.askin.ws/blog/java-ile-server-socket-yapimi/</link>
      <pubDate>Sat, 11 Dec 2010 04:25:00 +0300</pubDate>
      <author>askin@askin.ws (Aşkın Özgür)</author>
      <guid>https://blog.askin.ws/blog/java-ile-server-socket-yapimi/</guid>
      <description>Bir proje için server sockete ihtiyaç duydum. Öncelikli dilim python olmasına rağmen, sunucu solaris olunca java ile yazmak daha cazip geldi. Öncelikli olarak test amaçlı birkaç satır kod yazdım. Akla gelen ilk örnek echo server oluyor :) aşağıda multi thread çalışan, birden fazla kullanıcıya cevap verebilecek bir echo server var:)
Server.java
/** * @author: Aşkın Yollu */ import java.net.*; import java.io.*; class Server { public static void main(String args[]) throws Exception { ServerSocket myService = null; Socket client = null; Worker tmpworker = null; try { // 1234 nolu portu dinle  myService = new ServerSocket(1234); } catch (IOException e) { System.</description>
    </item>
    
  </channel>
</rss>