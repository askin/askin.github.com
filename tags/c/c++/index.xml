<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c/c&#43;&#43; on Aşkın Özgür</title>
    <link>https://blog.askin.ws/tags/c/c&#43;&#43;/</link>
    <description>Recent content in c/c&#43;&#43; on Aşkın Özgür</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-TR</language>
    <managingEditor>askin@askin.ws (Aşkın Özgür)</managingEditor>
    <webMaster>askin@askin.ws (Aşkın Özgür)</webMaster>
    
	<atom:link href="https://blog.askin.ws/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UDP Broadcast sunucu - istemci</title>
      <link>https://blog.askin.ws/blog/udp-broadcast-sunucu-istemci/</link>
      <pubDate>Fri, 03 Aug 2012 15:31:00 +0300</pubDate>
      <author>askin@askin.ws (Aşkın Özgür)</author>
      <guid>https://blog.askin.ws/blog/udp-broadcast-sunucu-istemci/</guid>
      <description>Sunucu:
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/socket.h&amp;gt;#include &amp;lt;netinet/in.h&amp;gt; #define MY_PORT 3333  int main(int argc, char *argv[]) { int sockfd, new_fd; struct sockaddr_in my_addr; // hedef adres  struct sockaddr_in their_addr; // baglanti yapan adres  int sin_size, rt; // gelen verinin tutuldugu buffer  char buf[32]; // islem yapmak icin gerekli dosya gosterici  sockfd = socket(AF_INET, SOCK_DGRAM, 0); sin_size = sizeof(struct sockaddr_in); // adres ile ilgili ayarlar  my_addr.sin_family = AF_INET; my_addr.</description>
    </item>
    
    <item>
      <title>Linux, Paralel Port ile 2x16 LCD Ekran Kullanımı</title>
      <link>https://blog.askin.ws/blog/linux-paralel-port-ile-2x16-lcd-ekran-kullanimi/</link>
      <pubDate>Sun, 27 Feb 2011 03:08:00 +0300</pubDate>
      <author>askin@askin.ws (Aşkın Özgür)</author>
      <guid>https://blog.askin.ws/blog/linux-paralel-port-ile-2x16-lcd-ekran-kullanimi/</guid>
      <description>Çalıştığım projede linuxta paralel port ile lcd ekran kullanmam gerekti. Neredeyse internetin altını üstüne getirdim ama işime yarar çok birşey bulamadım. Sonunda DOS için yazılmış bir kod buldum. Bu kodu biraz inceleyip, gerekli püf noktaları bulunca kodu linux&amp;rsquo;a uydurmak çok zor olmadı. Hatta neredeyse sadece kullanılan fonksiyonun adını ve parametre yerlerini değiştirdim :)
Aslında olay çok basitmiş, lcd ekrandan çıkan 14 bacaktan, 8tanesini data ve komut göndermek için kullanıyoruz. 1 bacak enable, 1 set - reset seçimi için, 1 bacakta read/write seçimi için kullanılıyor.</description>
    </item>
    
    <item>
      <title>C ile Nesne Yaratmak</title>
      <link>https://blog.askin.ws/blog/c-ile-nesne-yaratmak/</link>
      <pubDate>Tue, 27 Apr 2010 04:08:00 +0300</pubDate>
      <author>askin@askin.ws (Aşkın Özgür)</author>
      <guid>https://blog.askin.ws/blog/c-ile-nesne-yaratmak/</guid>
      <description>Evet kışkırtıcı bir başlık attım :) Aslında yapacağımız olay bir structı nesne gibi kullanmak. Buna benzer bir kodu yıllar önce görmüştüm. O günden bu güne sürekli böyle bir şeyi nasıl yaparım diye araştırdım. Anca bugün çözebildim olayı ;) Kodu aşağıda yorum satırıyla beraber veriyorum. Yorumlarda gerekli açıklamaları yaptım.
Bu yazıyla C-3PO nun ne lakası var diyebilirsiniz. C ile resim ararken karşıma bu çıktı, bende boş durmasın dedim :)
/* * Sınıfımızı yaratıyoruz */ struct _myobject { // alt alanlar  int a, b; /* * Metod * Burada fonksiyon pointerı tanımlıyoruz */ int (*add)(struct _myobject*); }; // struct ön ekinden kurtuluyoruz typedef struct _myobject MyObject; /* * Asıl işi yapacak fonksiyonu tanımlıyoruz * MyObject structını parametre olarak alıyor */ int realAdd(MyObject* a) { return a-&amp;gt;a + a-&amp;gt;b; } int main ( void ) { /* * Nesnemizi oluşturuyoruz.</description>
    </item>
    
    <item>
      <title>Gtk &lt;= 2.18.9 Pencere Gizleme Sorunu</title>
      <link>https://blog.askin.ws/blog/gtk-2-18-9-pencere-gizleme-sorunu/</link>
      <pubDate>Thu, 08 Apr 2010 06:19:00 +0300</pubDate>
      <author>askin@askin.ws (Aşkın Özgür)</author>
      <guid>https://blog.askin.ws/blog/gtk-2-18-9-pencere-gizleme-sorunu/</guid>
      <description>Gece gece uyku tutmadı var olan bir programı kurcalamaya başladım. Amacım programın sitem çekmecesinden çalışabilir hale getirmekti.
Her şeyi yaptım fakat bir türlü pencereyi gizleyemiyordum :) Doküman gtk_window_get_mnemonics_visible () fonksiyonunu kullanmamı söylüyordu, fakat kullandığım gtk sürümünde bu fonksiyon tanımlı değildi(2.18.7). Eski sürüm için olan dokümanı incelediğimde bu işi yapan bir fonksiyon yoktu. Sistemde kurulu gtk ve python ile bu işi yapabiliyordum. Normal olarak c ile de yapabilmem lazımdı:) Biraz inceledikten sonra, önce pencereyi gizleyen, ardından boyutunu eski haline getirip sonra tekrar gösteren bir fonksiyon olduğunu fark ettim.</description>
    </item>
    
    <item>
      <title>C ile Komut Satırı Argumanları ve Parametreleri</title>
      <link>https://blog.askin.ws/blog/c-ile-komut-satiri-argumanlari-ve-parametreleri/</link>
      <pubDate>Fri, 10 Jul 2009 18:01:00 +0300</pubDate>
      <author>askin@askin.ws (Aşkın Özgür)</author>
      <guid>https://blog.askin.ws/blog/c-ile-komut-satiri-argumanlari-ve-parametreleri/</guid>
      <description>Komut satırı programları -h yada &amp;ndash;help gibi parametreler alırlar. Bu alınan parametrelerin kolay kullanılması için getopt adında bir kütüphane yaratılmış. Bu kütüphane kullanlanılarak çok rahat böyle programlar yazılabilir. Bende bunun için küçük bir örnek yazdım.
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;getopt.h&amp;gt; int print_usage ( void ); int main (int argc, char* argv[]) { int next_option; char* output; char* input; char color = 47; /** * kisa parametler burda tanimli * ardindan parametre alanlar : ile bitiyor * orn: o: bir parametre aliyor b almiyor * -o kelebek yada -b gibi */ const char* const short_options = &amp;#34;hbro:i:&amp;#34;; /** * Burdada uzun hallerini tanimliyoruz.</description>
    </item>
    
  </channel>
</rss>